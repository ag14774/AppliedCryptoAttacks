Q.1 Consider that instead of influencing data (e.g., the AES state), a
    fault might influence control-flow (e.g., a conditional statement)
    somehow during execution.  Stating any assumptions you make, give
    an alternative attack strategy based on this ability.

An alternative attack is the one described by Turnstall et al which forces
the MixColumn round function to process only 15 of the 16 bytes. After
executing the second step which reduces the key space to 2^8 possible
keys we can proceed in 2 different ways depending on the model used for
the attack and the underlying assumptions. The first model assumes that
we know which byte was unaffected after the MixColumns operation. In
addition to the equations of step 2 we now have the condition that 1
(known) byte is unchanged by MixColumns and therefore the key space can
be reduced to approximately 1-2 keys.  The second model assumes that we
do not know which byte was (un)affected by this fault. Using a similar
approach we can limit the keyspace to 16-17 keys.

Finally, we can also carry out an attack by injecting a fault to influence
only the control flow. For example, if we can alter the SubBytes function
during round 8 to skip 1 byte, then this error will propagate to the
whole ciphertext by the end of round 10. This can be exploited in the
same way we exploited a direct fault to the data to reduce the key space.

Q.2 Outline the methods available for hardening this AES implementation
    against fault attacks; for each method, explain any assumptions you
    make and compare it with the others wrt.  metrics such as robustness,
    latency, and memory footprint.

Assuming that we can only introduce one fault per interaction, the
algorithm can be modified to execute each instruction twice or three times
to detect or even correct faults. This works because it is really hard
to insert faults into consecutive instructions, however it will obviously
increase the running time of the algorithm. It should be noted that if we
can insert more than 1 fault per interaction then running the algorithm
2 or 3 times and comparing the final results is not enough, since there
is enough time to inject the same fault in all runs. Each instruction
should be duplicated and checked instead. Finally, there are a lot of
hardware countermeasures one can take. For example, a clock jitter can
be used to shift the processor clock frequency non-deterministically,
making it really hard to inject a fault. This can be very efficient
since it does not noticeably affect the latency but an attacker that can
control the clock(like in our example) might still be able to inject a
fault. Other hardware countermeasures include: active mesh or a clock
glitch detector to disable the chip once a glitch is detected.

Q.3 The question outlines one method to induce faults (i.e., via a clock
    glitch).  For the same attack target, construct a set of alternative
    methods and explain whether they seem applicable given the context.

Since the attacker also supplies the power to the processor, she can
cause power spikes instead of a glitch to the clock signal to cause a
bit flip in a similar way to our original attack. Other methods include
decapping the chip and using a laser apparatus to inject a fault. As
before, if we can precisely inject a fault to a single known byte of
the state matrix then we can carry out a similar attack. Finally, an EM
pulse generator can be used to inject faults. However, it can be hard
to control how the fault will be injected and it can affect many bytes
at a time instead of a single one.

Q.4 For side-channel attacks, the number of acquisitions required can be
    used as a measure of efficiency.  Outline the equivalent measure for
    fault attacks, and explain whether (and why) you think a side-channel
    attack on AES could be as efficient as a fault attack based on
    these measures.

In a real scenario it can be really hard(and sometimes requires expensive
equipment) to know exactly when to insert the fault. Therefore, fault
attacks are limited by the number of faults they require and a good
measure would be the number of interactions(or even better count only
the interactions that actually introduce a fault eg. in our case 1
interaction) with the device. Side channel attacks use some informations
leaked via a side channel and in practical scenario this information
contains a lot of noise. For this kind of attack to be useful, one
requires a lot of samples and therefore it is impossible to compare the
efficiency of a fault attack to a side channel attack using this measure.
