-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : 30 hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited 
by the assignment description of course).  Let us know what third-party 
source code or resources you used (if any) so it's clear what's your work 
and what isn't:

[...]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as the efficiency, robustness, 
generality, realism, or style of a solution.

[X] Stage 1 : an attack based on error messages
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : 9F02E9D9BE7F27E1B452F046379EC207636F177B

[X] Stage 2 : an attack based on execution time
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : ABD29CAB8ED24EC9

[X] Stage 3 : an attack based on an injected fault
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : 8B1FDDD8BAF619C91D5D76D68AF6AB0B

[X] Stage 4 : an attack based on power consumption
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : 190E08E6EA64EEF95ACD5CA2D7729EBDB09EB39D822E2754615CE0F6CE109FEF

                                                                     ------
                                                                     (400%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

Compile with:
make
and run with a command of the form: 
java -cp bin/. Launcher stage1 oaep/13798.D oaep/13798.conf

or
compile with:
make jar(after running make)
and run with
java -jar Launcher.jar stage1 oaep/13798.D oaep/13798.conf


For Stage 2:
The number of samples is set to 3000. This is enough for the attack to run without
any trouble. However, the code also includes some error correction logic. To see
this in action, reduce the number of samples to 1000. When the statistic is not
reliable(say for bit x), it will try setting bit x to 1 and continue.
If we cannot reliably decide what the x+1 bit is, then we backtrack back and flip
bit x again. We continue with bit x+1 but if the results are not improved, we
backtrack to bit x-1, flip it and continue and so on and so forth.
If a lot of errors accumulate, then we reset to 0 and try again with more samples.

Stage 3:
In the method attack() there is a boolean 'singleFault'. By default it is set
to true. However, if set to false, the attack will use 2 faults to further limit
the key space. Step 2 of the attack is parallelised.

Stage 4:
j is always 0 therefore we do not need to compute a^j.
The first 3000 elements of each trace list were used to attack the first AES.
Similarly, the last 3000 elements of each trace list were used to attack the
second AES.
-------------------------------------------------------------------------------
